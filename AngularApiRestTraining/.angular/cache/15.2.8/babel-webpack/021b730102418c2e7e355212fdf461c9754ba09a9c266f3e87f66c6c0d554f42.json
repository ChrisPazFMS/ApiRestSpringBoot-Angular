{"ast":null,"code":"import { environment } from 'src/app/environment/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TrainingService {\n  constructor(http) {\n    this.http = http;\n  }\n  postTraining(training) {\n    const formData = new FormData();\n    formData.append('name', training.name);\n    formData.append('description', training.description);\n    formData.append('price', training.price.toString());\n    formData.append('quantity', training.quantity.toString());\n    formData.append('imagePath', training.imagePath);\n    return this.http.post(environment.host + '/trainings', formData);\n  }\n  getTrainings() {\n    return this.http.get(environment.host + '/trainings');\n  }\n  // getTrainingById(id: number): Observable<Training> {\n  //   return this.http.get<Training>(environment.host + '/training' + id);\n  // }\n  // getTraining(id: number): Observable<Training> {\n  //   const url = `http://localhost:8080/api/training/${id}`;\n  //   return this.http.get<Training>(url);\n  // }\n  getTraining(id) {\n    const url = `http://localhost:8080/api/training/${id}`;\n    return this.http.get(url).pipe();\n  }\n  handleError(handleError) {\n    throw new Error('Method not implemented.');\n  }\n  updateTraining(training) {\n    const url = `http://localhost:8080/api/training/${training}`;\n    return this.http.put(url, training);\n  }\n  deleteTraining(id) {\n    const url = `${environment.host + '/training'}/${id}`;\n    return this.http.delete(url);\n  }\n}\nTrainingService.ɵfac = function TrainingService_Factory(t) {\n  return new (t || TrainingService)(i0.ɵɵinject(i1.HttpClient));\n};\nTrainingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TrainingService,\n  factory: TrainingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,iCAAiC;;;AAO7D,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvCC,YAAY,CAACC,QAAkB;IAC7B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,QAAQ,CAACI,IAAI,CAAC;IACtCH,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEH,QAAQ,CAACK,WAAW,CAAC;IACpDJ,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,QAAQ,CAACM,KAAK,CAACC,QAAQ,EAAE,CAAC;IACnDN,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,QAAQ,CAACQ,QAAQ,CAACD,QAAQ,EAAE,CAAC;IACzDN,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEH,QAAQ,CAACS,SAAS,CAAC;IAEhD,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAACf,WAAW,CAACgB,IAAI,GAAG,YAAY,EAAEV,QAAQ,CAAC;EAClE;EAEAW,YAAY;IACV,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAalB,WAAW,CAACgB,IAAI,GAAG,YAAY,CAAC;EACnE;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEAG,WAAW,CAACC,EAAU;IACpB,MAAMC,GAAG,GAAG,sCAAsCD,EAAE,EAAE;IACtD,OAAO,IAAI,CAACjB,IAAI,CAACe,GAAG,CAAWG,GAAG,CAAC,CAACC,IAAI,EAAE;EAC5C;EACAC,WAAW,CACTA,WAAgB;IAEhB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEAC,cAAc,CAACpB,QAAkB;IAC/B,MAAMgB,GAAG,GAAG,sCAAsChB,QAAQ,EAAE;IAC5D,OAAO,IAAI,CAACF,IAAI,CAACuB,GAAG,CAAWL,GAAG,EAAEhB,QAAQ,CAAC;EAC/C;EAEAsB,cAAc,CAACP,EAAU;IACvB,MAAMC,GAAG,GAAG,GAAGrB,WAAW,CAACgB,IAAI,GAAG,WAAW,IAAII,EAAE,EAAE;IACrD,OAAO,IAAI,CAACjB,IAAI,CAACyB,MAAM,CAAOP,GAAG,CAAC;EACpC;;AA7CWpB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA4B,SAAf5B,eAAe;EAAA6B,YAFd;AAAM","names":["environment","TrainingService","constructor","http","postTraining","training","formData","FormData","append","name","description","price","toString","quantity","imagePath","post","host","getTrainings","get","getTraining","id","url","pipe","handleError","Error","updateTraining","put","deleteTraining","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\PazmanyC\\Desktop\\Api_Rest_Angular-&-SpringBoot\\ApiRestSpringBoot-Angular\\AngularApiRestTraining\\src\\app\\services\\training\\training.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { environment } from 'src/app/environment/environment';\nimport { Training } from 'src/app/models/training';\nimport { catchError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrainingService {\n  constructor(private http: HttpClient) {}\n\n  postTraining(training: Training): Observable<any> {\n    const formData = new FormData();\n    formData.append('name', training.name);\n    formData.append('description', training.description);\n    formData.append('price', training.price.toString());\n    formData.append('quantity', training.quantity.toString());\n    formData.append('imagePath', training.imagePath);\n\n    return this.http.post(environment.host + '/trainings', formData);\n  }\n\n  getTrainings(): Observable<Training[]> {\n    return this.http.get<Training[]>(environment.host + '/trainings');\n  }\n\n  // getTrainingById(id: number): Observable<Training> {\n  //   return this.http.get<Training>(environment.host + '/training' + id);\n  // }\n\n  // getTraining(id: number): Observable<Training> {\n  //   const url = `http://localhost:8080/api/training/${id}`;\n  //   return this.http.get<Training>(url);\n  // }\n\n  getTraining(id: number): Observable<Training> {\n    const url = `http://localhost:8080/api/training/${id}`;\n    return this.http.get<Training>(url).pipe();\n  }\n  handleError(\n    handleError: any\n  ): import('rxjs').OperatorFunction<Training, any> {\n    throw new Error('Method not implemented.');\n  }\n\n  updateTraining(training: Training): Observable<Training> {\n    const url = `http://localhost:8080/api/training/${training}`;\n    return this.http.put<Training>(url, training);\n  }\n\n  deleteTraining(id: number): Observable<void> {\n    const url = `${environment.host + '/training'}/${id}`;\n    return this.http.delete<void>(url);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}